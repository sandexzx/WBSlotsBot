#!/usr/bin/env python3
import os
import json
import asyncio
import logging
from datetime import datetime
from typing import Set, Dict, Any
from dataclasses import dataclass

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(override=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.subscribed_users: Set[int] = set()
        self.subscriptions_file = 'subscriptions.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        self.load_subscriptions()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()
    
    def load_subscriptions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.subscriptions_file):
                with open(self.subscriptions_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.subscribed_users = set(data.get('subscribed_users', []))
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            self.subscribed_users = set()
    
    def save_subscriptions(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'subscribed_users': list(self.subscribed_users),
                'updated_at': datetime.now().isoformat()
            }
            with open(self.subscriptions_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            user_id = message.from_user.id
            username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.subscribed_users.add(user_id)
            self.save_subscriptions()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø–∏—Å–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="unsubscribe")]
            ])
            
            welcome_text = f"""
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Slots Monitor!

–ü—Ä–∏–≤–µ—Ç, @{username}! 
–¢—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ WildBerries.

üîî –¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0)
‚Ä¢ –°–ª–æ—Ç–∞—Ö —Å –Ω–∏–∑–∫–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º

–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
            """
            
            await message.answer(welcome_text.strip(), reply_markup=keyboard)
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω: {user_id} (@{username})")
        
        @self.dp.callback_query(lambda c: c.data == "unsubscribe")
        async def callback_unsubscribe(callback: types.CallbackQuery):
            user_id = callback.from_user.id
            username = callback.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if user_id in self.subscribed_users:
                self.subscribed_users.remove(user_id)
                self.save_subscriptions()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="subscribe")]
                ])
                
                await callback.message.edit_text(
                    "‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /start",
                    reply_markup=keyboard
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {user_id} (@{username})")
            else:
                await callback.answer("–¢—ã —É–∂–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_alert=True)
            
            await callback.answer()
        
        @self.dp.callback_query(lambda c: c.data == "subscribe")
        async def callback_subscribe(callback: types.CallbackQuery):
            user_id = callback.from_user.id
            username = callback.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if user_id not in self.subscribed_users:
                self.subscribed_users.add(user_id)
                self.save_subscriptions()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø–∏—Å–∫–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="unsubscribe")]
                ])
                
                await callback.message.edit_text(
                    "üîî –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ—Ç–∞—Ö WB!\n\n–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=keyboard
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è: {user_id} (@{username})")
            else:
                await callback.answer("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_alert=True)
            
            await callback.answer()
    
    def format_datetime(self, dt_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        try:
            dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
            return dt.strftime('%d.%m %H:%M')
        except:
            return dt_str
    
    def format_monitoring_message(self, parsed_data: Dict[str, Any], monitoring_results: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ –∫–æ–Ω—Å–æ–ª—å"""
        
        if not monitoring_results.get('success'):
            return f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {monitoring_results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
        summary = monitoring_results.get('summary', {})
        
        message_parts = [
            f"üéØ <b>WB SLOTS UPDATE - {timestamp}</b>",
            "",
            f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {summary.get('total_sheets', 0)}",
            f"‚úÖ –õ–∏—Å—Ç–æ–≤ —Å —Å–ª–æ—Ç–∞–º–∏: {summary.get('sheets_with_slots', 0)}",
            f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {summary.get('total_available_slots', 0)}",
            ""
        ]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
        for sheet_name, sheet_data in parsed_data.get('sheets', {}).items():
            monitoring_data = monitoring_results.get('sheets', {}).get(sheet_name, {})
            available_slots = monitoring_data.get('available_slots', [])
            available_options = monitoring_data.get('available_options', {})
            
            message_parts.append(f"üìã <b>{sheet_name}</b>")
            message_parts.append(f"üìÖ {sheet_data.get('start_date', 'N/A')} - {sheet_data.get('end_date', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            errors = monitoring_data.get('errors', [])
            if errors:
                message_parts.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {'; '.join(errors)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            products = sheet_data.get('products', [])
            warehouse_ids = monitoring_data.get('warehouse_ids', {})
            
            if not products:
                message_parts.append("   –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                message_parts.append("")
                continue
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–æ –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
            self.format_products_analysis_for_telegram(
                message_parts, products, available_slots, 
                warehouse_ids, available_options
            )
            message_parts.append("")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        message = "\n".join(message_parts)
        if len(message) > 4000:
            message = message[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        return message
    
    def format_products_analysis_for_telegram(self, message_parts: list, products: list, available_slots: list, 
                                            _warehouse_ids: dict, available_options: dict):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Telegram –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ –∫–æ–Ω—Å–æ–ª—å"""
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π –ø–æ –±–∞—Ä–∫–æ–¥–∞–º
        options_by_barcode = {}
        if available_options and 'result' in available_options:
            for item in available_options['result']:
                barcode = item.get('barcode', '')
                options_by_barcode[barcode] = item
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ—Ç–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
        slots_by_warehouse = {}
        for slot in available_slots:
            warehouse_id = slot['warehouse_id']
            if warehouse_id not in slots_by_warehouse:
                slots_by_warehouse[warehouse_id] = []
            slots_by_warehouse[warehouse_id].append(slot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        for product in products:
            barcode = product['barcode']
            quantity = product['quantity']
            
            message_parts.append(f"üì¶ <b>–ë–ê–†–ö–û–î: {barcode}</b> (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∫–æ–¥–∞
            barcode_options = options_by_barcode.get(barcode)
            
            if not barcode_options:
                message_parts.append("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ü–∏—è—Ö –ø—Ä–∏–µ–º–∫–∏")
                continue
            
            if barcode_options.get('isError'):
                error = barcode_options.get('error', {})
                message_parts.append(f"   ‚ùå –û–®–ò–ë–ö–ê: {error.get('title', 'Unknown')} - {error.get('detail', 'No details')}")
                continue
            
            warehouses_for_barcode = barcode_options.get('warehouses', [])
            if not warehouses_for_barcode:
                message_parts.append("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                continue
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É —Å–∫–ª–∞–¥—É
            has_available_warehouses = False
            
            for warehouse_option in warehouses_for_barcode:
                warehouse_id = warehouse_option['warehouseID']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Å–∫–ª–∞–¥ –≤ –Ω–∞—à–∏—Ö —Å–ª–æ—Ç–∞—Ö
                warehouse_slots = slots_by_warehouse.get(warehouse_id, [])
                
                if not warehouse_slots:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                
                warehouse_name = warehouse_slots[0]['warehouse_name']  # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ª–æ—Ç–æ–≤
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ
                available_packaging = {}
                if warehouse_option.get('canBox'):
                    available_packaging['–ö–æ—Ä–æ–±–∞'] = 'üì¶'
                if warehouse_option.get('canMonopallet'):
                    available_packaging['–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã'] = 'üöõ'
                if warehouse_option.get('canSupersafe'):
                    available_packaging['–°—É–ø–µ—Ä—Å–µ–π—Ñ'] = 'üîí'
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —É–ø–∞–∫–æ–≤–∫–∞–º
                filtered_slots = []
                for slot in warehouse_slots:
                    if slot['box_type'] in available_packaging:
                        filtered_slots.append(slot)
                
                if not filtered_slots:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤
                
                has_available_warehouses = True
                message_parts.append(f"   üè™ <b>{warehouse_name}</b> (ID: {warehouse_id})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏
                if available_packaging:
                    packaging_list = [f"{emoji} {name}" for name, emoji in available_packaging.items()]
                    message_parts.append(f"      –£–ø–∞–∫–æ–≤–∫–∏: {', '.join(packaging_list)}")
                else:
                    message_parts.append("      ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø–∞–∫–æ–≤–æ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã
                message_parts.append("      üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–µ
                slots_by_date = {}
                for slot in filtered_slots:
                    date = slot['date']
                    if date not in slots_by_date:
                        slots_by_date[date] = []
                    slots_by_date[date].append(slot)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                sorted_dates = sorted(slots_by_date.keys())
                
                if not sorted_dates:
                    message_parts.append("         ‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤")
                else:
                    for date in sorted_dates:
                        date_slots = slots_by_date[date]
                        formatted_date = self.format_datetime(date)
                        
                        for slot in date_slots:
                            coefficient = slot['coefficient']
                            box_type = slot['box_type']
                            
                            if coefficient == 0:
                                cost_info = "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</b>"
                            else:
                                cost_info = f"üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {coefficient}"
                            
                            message_parts.append(f"         {formatted_date} ({box_type}): {cost_info}")
                
                message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–∫–ª–∞–¥–∞–º–∏
            
            if not has_available_warehouses:
                message_parts.append("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏")
            
            message_parts.append("-" * 60)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
    
    async def send_notification(self, parsed_data: Dict[str, Any], monitoring_results: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        
        if not self.subscribed_users:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        message = self.format_monitoring_message(parsed_data, monitoring_results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        successful_sends = 0
        failed_sends = 0
        
        for user_id in self.subscribed_users.copy():  # –ö–æ–ø–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                successful_sends += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if "blocked" in str(e).lower() or "chat not found" in str(e).lower():
                    self.subscribed_users.remove(user_id)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
                
                failed_sends += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if failed_sends > 0:
            self.save_subscriptions()
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {successful_sends} —É—Å–ø–µ—à–Ω–æ, {failed_sends} –æ—à–∏–±–æ–∫")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot)
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        await self.bot.session.close()


def create_telegram_notifier():
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramNotifier"""
    return TelegramNotifier()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    async def main():
        notifier = create_telegram_notifier()
        await notifier.start_bot()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")