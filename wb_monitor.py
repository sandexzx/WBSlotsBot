#!/usr/bin/env python3
import sys
import os
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from google_sheets_parser import create_parser_from_env
from wb_api import WBMonitor, WildBerriesAPI


class WBSlotsMonitor:
    def __init__(self, update_interval: int = 300):  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.update_interval = update_interval
        self.sheets_parser = create_parser_from_env()
        self.wb_monitor = WBMonitor()
        self.last_update = None
        self.cycle_count = 0
        
    def format_datetime(self, dt_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        try:
            dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
            return dt.strftime('%d.%m %H:%M')
        except:
            return dt_str
    
    def print_separator(self, char: str = "=", length: int = 80):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        print(char * length)
    
    def print_header(self, text: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        self.print_separator()
        print(f" {text}")
        self.print_separator()
    
    def display_monitoring_results(self, parsed_data: Dict[str, Any], monitoring_results: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        self.print_header(f"–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–õ–û–¢–û–í WB - {timestamp}")
        
        if not monitoring_results.get('success'):
            print(f"‚ùå –û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: {monitoring_results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        summary = monitoring_results.get('summary', {})
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {summary.get('total_sheets', 0)}")
        print(f"‚úÖ –õ–∏—Å—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏: {summary.get('sheets_with_slots', 0)}")
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {summary.get('total_available_slots', 0)}")
        print()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
        for sheet_name, sheet_data in parsed_data.get('sheets', {}).items():
            monitoring_data = monitoring_results.get('sheets', {}).get(sheet_name, {})
            
            print(f"üìã –õ–ò–°–¢: {sheet_name}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {sheet_data.get('start_date', 'N/A')} - {sheet_data.get('end_date', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            errors = monitoring_data.get('errors', [])
            if errors:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏: {'; '.join(errors)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            products = sheet_data.get('products', [])
            available_slots = monitoring_data.get('available_slots', [])
            warehouse_ids = monitoring_data.get('warehouse_ids', {})
            available_options = monitoring_data.get('available_options', {})
            
            if not products:
                print("   –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                print()
                continue
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.display_products_analysis(products, available_slots, warehouse_ids, available_options)
            print()
    
    def display_products_analysis(self, products: List[Dict], available_slots: List[Dict], 
                                warehouse_ids: Dict[str, int], available_options: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –±–∞—Ä–∫–æ–¥–∞–º"""
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π –ø–æ –±–∞—Ä–∫–æ–¥–∞–º
        options_by_barcode = {}
        if available_options and 'result' in available_options:
            for item in available_options['result']:
                barcode = item.get('barcode', '')
                options_by_barcode[barcode] = item
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ—Ç–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
        slots_by_warehouse = {}
        for slot in available_slots:
            warehouse_id = slot['warehouse_id']
            if warehouse_id not in slots_by_warehouse:
                slots_by_warehouse[warehouse_id] = []
            slots_by_warehouse[warehouse_id].append(slot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        for product in products:
            barcode = product['barcode']
            quantity = product['quantity']
            
            print(f"üì¶ –ë–ê–†–ö–û–î: {barcode} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∫–æ–¥–∞
            barcode_options = options_by_barcode.get(barcode)
            
            if not barcode_options:
                print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ü–∏—è—Ö –ø—Ä–∏–µ–º–∫–∏")
                continue
            
            if barcode_options.get('isError'):
                error = barcode_options.get('error', {})
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {error.get('title', 'Unknown')} - {error.get('detail', 'No details')}")
                continue
            
            warehouses_for_barcode = barcode_options.get('warehouses', [])
            if not warehouses_for_barcode:
                print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                continue
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É —Å–∫–ª–∞–¥—É
            has_available_warehouses = False
            
            for warehouse_option in warehouses_for_barcode:
                warehouse_id = warehouse_option['warehouseID']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Å–∫–ª–∞–¥ –≤ –Ω–∞—à–∏—Ö —Å–ª–æ—Ç–∞—Ö
                warehouse_slots = slots_by_warehouse.get(warehouse_id, [])
                
                if not warehouse_slots:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                
                warehouse_name = warehouse_slots[0]['warehouse_name']  # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ª–æ—Ç–æ–≤
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ
                available_packaging = {}
                if warehouse_option.get('canBox'):
                    available_packaging['–ö–æ—Ä–æ–±–∞'] = 'üì¶'
                if warehouse_option.get('canMonopallet'):
                    available_packaging['–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã'] = 'üöõ'
                if warehouse_option.get('canSupersafe'):
                    available_packaging['–°—É–ø–µ—Ä—Å–µ–π—Ñ'] = 'üîí'
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —É–ø–∞–∫–æ–≤–∫–∞–º
                filtered_slots = []
                for slot in warehouse_slots:
                    if slot['box_type'] in available_packaging:
                        filtered_slots.append(slot)
                
                if not filtered_slots:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤
                
                has_available_warehouses = True
                print(f"   üè™ {warehouse_name} (ID: {warehouse_id})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏
                if available_packaging:
                    packaging_list = [f"{emoji} {name}" for name, emoji in available_packaging.items()]
                    print(f"      –£–ø–∞–∫–æ–≤–∫–∏: {', '.join(packaging_list)}")
                else:
                    print("      ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø–∞–∫–æ–≤–æ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã
                print("      üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–µ
                slots_by_date = {}
                for slot in filtered_slots:
                    date = slot['date']
                    if date not in slots_by_date:
                        slots_by_date[date] = []
                    slots_by_date[date].append(slot)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                sorted_dates = sorted(slots_by_date.keys())
                
                if not sorted_dates:
                    print("         ‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤")
                else:
                    for date in sorted_dates:
                        date_slots = slots_by_date[date]
                        formatted_date = self.format_datetime(date)
                        
                        for slot in date_slots:
                            coefficient = slot['coefficient']
                            box_type = slot['box_type']
                            
                            if coefficient == 0:
                                cost_info = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
                            else:
                                cost_info = f"üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {coefficient}"
                            
                            print(f"         {formatted_date} ({box_type}): {cost_info}")
                
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–∫–ª–∞–¥–∞–º–∏
            
            if not has_available_warehouses:
                print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏")
            
            print("-" * 60)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
    
    def run_monitoring_cycle(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        cycle_start_time = time.time()
        
        try:
            # 1. –ü–∞—Ä—Å–∏–Ω–≥ Google —Ç–∞–±–ª–∏—Ü
            print("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ Google —Ç–∞–±–ª–∏—Ü...")
            parse_start = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è {sheet_name: SheetsData}
            sheets_data = self.sheets_parser.parse_all_sheets()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            parsed_data = self.sheets_parser.to_dict(sheets_data)
            
            parse_time = time.time() - parse_start
            
            if not parsed_data.get('sheets'):
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü',
                    'parse_time': parse_time,
                    'api_time': 0,
                    'total_time': time.time() - cycle_start_time
                }
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {parse_time:.2f}—Å. –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(parsed_data['sheets'])}")
            
            # 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ API WB
            print("üîÑ –ó–∞–ø—Ä–æ—Å API WildBerries...")
            api_start = time.time()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º parsed_data –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è WBMonitor
            temp_file = 'temp_parsed_data.json'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(parsed_data, f, ensure_ascii=False, indent=2)
            
            try:
                monitoring_results = self.wb_monitor.monitor_parsed_data(temp_file)
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            
            api_time = time.time() - api_start
            total_time = time.time() - cycle_start_time
            
            print(f"‚úÖ API –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {api_time:.2f}—Å")
            
            # 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.display_monitoring_results(parsed_data, monitoring_results)
            
            return {
                'success': True,
                'parsed_data': parsed_data,
                'monitoring_results': monitoring_results,
                'parse_time': parse_time,
                'api_time': api_time,
                'total_time': total_time
            }
            
        except Exception as e:
            total_time = time.time() - cycle_start_time
            return {
                'success': False,
                'error': str(e),
                'parse_time': 0,
                'api_time': 0,
                'total_time': total_time
            }
    
    def run_continuous_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WB —Å–ª–æ—Ç–æ–≤")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_interval} —Å–µ–∫—É–Ω–¥")
        self.print_separator()
        
        try:
            while True:
                self.cycle_count += 1
                
                print(f"\nüîÑ –¶–ò–ö–õ #{self.cycle_count} - {datetime.now().strftime('%H:%M:%S')}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                result = self.run_monitoring_cycle()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if result['success']:
                    print(f"\n‚è±Ô∏è  –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
                    print(f"   –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü: {result['parse_time']:.2f}—Å")
                    print(f"   API –∑–∞–ø—Ä–æ—Å—ã: {result['api_time']:.2f}—Å")
                    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {result['total_time']:.2f}—Å")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    self.last_update = datetime.now()
                else:
                    print(f"\n‚ùå –û–®–ò–ë–ö–ê –¶–ò–ö–õ–ê: {result['error']}")
                    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {result['total_time']:.2f}—Å")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                print(f"\nüò¥ –û–∂–∏–¥–∞–Ω–∏–µ {self.update_interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –≤: {(datetime.now() + timedelta(seconds=self.update_interval)).strftime('%H:%M:%S')}")
                self.print_separator(".", 60)
                
                time.sleep(self.update_interval)
                
        except KeyboardInterrupt:
            print(f"\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {self.cycle_count}")
            if self.last_update:
                print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.last_update.strftime('%Y-%m-%d %H:%M:%S')}")
        except Exception as e:
            print(f"\n\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {self.cycle_count}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ WildBerries')
    parser.add_argument('--interval', '-i', type=int, default=300, 
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)')
    parser.add_argument('--once', action='store_true', 
                       help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    
    args = parser.parse_args()
    
    monitor = WBSlotsMonitor(update_interval=args.interval)
    
    if args.once:
        print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        result = monitor.run_monitoring_cycle()
        
        if result['success']:
            print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {result['total_time']:.2f}—Å")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {result['error']}")
            sys.exit(1)
    else:
        monitor.run_continuous_monitoring()


if __name__ == "__main__":
    main()