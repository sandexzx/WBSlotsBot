#!/usr/bin/env python3
import sys
import os
import time
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from google_sheets_parser import create_parser_from_env
from wb_api import WBMonitor, WildBerriesAPI


class WBSlotsMonitor:
    def __init__(self, update_interval: int = 300, telegram_notifier=None):  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.update_interval = update_interval
        self.sheets_parser = create_parser_from_env()
        self.wb_monitor = WBMonitor()
        self.last_update = None
        self.cycle_count = 0
        self.telegram_notifier = telegram_notifier
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_requests_per_minute = 6  # –ö–∞–∂–¥—ã–π endpoint –∏–º–µ–µ—Ç —Å–≤–æ–π –ª–∏–º–∏—Ç 6/–º–∏–Ω—É—Ç—É
        self.api_pause_between_requests = 4  # –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É API —Ü–∏–∫–ª–∞–º–∏
        self.current_api_requests = 0
        self.parsed_data = None  # –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏
        self.minute_start_time = None  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.api_execution_times = []  # –ò—Å—Ç–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.target_minute_duration = 60  # –¶–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    def format_datetime(self, dt_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        try:
            dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
            return dt.strftime('%d.%m %H:%M')
        except:
            return dt_str
    
    def print_separator(self, char: str = "=", length: int = 80):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        print(char * length)
    
    def print_header(self, text: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        self.print_separator()
        print(f" {text}")
        self.print_separator()
    
    def calculate_adaptive_pause(self, api_execution_time: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ø–∞—É–∑—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            api_execution_time: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –ø–∞—É–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.api_execution_times.append(api_execution_time)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ
        if len(self.api_execution_times) > 10:
            self.api_execution_times = self.api_execution_times[-10:]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        avg_api_time = sum(self.api_execution_times) / len(self.api_execution_times)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ API –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ —Ü–∏–∫–ª–∞
        remaining_requests = self.api_requests_per_minute - self.current_api_requests
        
        if remaining_requests <= 0:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –≤ —Ü–∏–∫–ª–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç—ã
            if self.minute_start_time:
                elapsed_time = time.time() - self.minute_start_time
                remaining_time = max(0, self.target_minute_duration - elapsed_time)
                return remaining_time
            return self.target_minute_duration
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–µ
        if self.minute_start_time:
            elapsed_time = time.time() - self.minute_start_time
            remaining_time = max(0, self.target_minute_duration - elapsed_time)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å—è –º–∏–Ω—É—Ç–∞
            remaining_time = self.target_minute_duration
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç—Ä–∞—Ç–∏–º –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è API –∑–∞–ø—Ä–æ—Å—ã
        estimated_api_time = remaining_requests * avg_api_time
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–∞—É–∑—ã
        total_pause_time = remaining_time - estimated_api_time
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—É–∑—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if remaining_requests > 0:
            adaptive_pause = max(1, total_pause_time / remaining_requests)  # –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞
        else:
            adaptive_pause = self.api_pause_between_requests
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–∞—É–∑—É
        adaptive_pause = min(adaptive_pause, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        
        return adaptive_pause
    
    def reset_minute_cycle(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        self.minute_start_time = time.time()
        self.current_api_requests = 0
        print(f"üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –º–∏–Ω—É—Ç–Ω—ã–π —Ü–∏–∫–ª: {datetime.now().strftime('%H:%M:%S')}")
    
    def log_adaptive_timing(self, api_time: float, adaptive_pause: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–∏–Ω–≥–∞—Ö"""
        if len(self.api_execution_times) > 1:
            avg_api_time = sum(self.api_execution_times) / len(self.api_execution_times)
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API: {avg_api_time:.2f}—Å")
        
        remaining_requests = self.api_requests_per_minute - self.current_api_requests
        print(f"‚è±Ô∏è  –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞: {adaptive_pause:.1f}—Å (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_requests} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        
        if self.minute_start_time:
            elapsed_time = time.time() - self.minute_start_time
            remaining_minute_time = max(0, self.target_minute_duration - elapsed_time)
            print(f"‚è∞ –í—Ä–µ–º—è –≤ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–µ: {elapsed_time:.1f}—Å / {self.target_minute_duration}—Å (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining_minute_time:.1f}—Å)")
    
    def display_monitoring_results(self, parsed_data: Dict[str, Any], monitoring_results: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        self.print_header(f"–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–õ–û–¢–û–í WB - {timestamp}")
        
        if not monitoring_results.get('success'):
            print(f"‚ùå –û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: {monitoring_results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        summary = monitoring_results.get('summary', {})
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {summary.get('total_sheets', 0)}")
        print(f"‚úÖ –õ–∏—Å—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏: {summary.get('sheets_with_slots', 0)}")
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {summary.get('total_available_slots', 0)}")
        print()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
        for sheet_name, sheet_data in parsed_data.get('sheets', {}).items():
            monitoring_data = monitoring_results.get('sheets', {}).get(sheet_name, {})
            
            print(f"üìã –õ–ò–°–¢: {sheet_name}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {sheet_data.get('start_date', 'N/A')} - {sheet_data.get('end_date', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            errors = monitoring_data.get('errors', [])
            if errors:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏: {'; '.join(errors)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            products = sheet_data.get('products', [])
            available_slots = monitoring_data.get('available_slots', [])
            warehouse_ids = monitoring_data.get('warehouse_ids', {})
            available_options = monitoring_data.get('available_options', {})
            
            if not products:
                print("   –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                print()
                continue
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.display_products_analysis(products, available_slots, warehouse_ids, available_options)
            print()
    
    def display_products_analysis(self, products: List[Dict], available_slots: List[Dict], 
                                warehouse_ids: Dict[str, int], available_options: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –±–∞—Ä–∫–æ–¥–∞–º"""
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π –ø–æ –±–∞—Ä–∫–æ–¥–∞–º
        options_by_barcode = {}
        if available_options and 'result' in available_options:
            for item in available_options['result']:
                barcode = item.get('barcode', '')
                options_by_barcode[barcode] = item
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ—Ç–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
        slots_by_warehouse = {}
        for slot in available_slots:
            warehouse_id = slot['warehouse_id']
            if warehouse_id not in slots_by_warehouse:
                slots_by_warehouse[warehouse_id] = []
            slots_by_warehouse[warehouse_id].append(slot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        for product in products:
            barcode = product['barcode']
            quantity = product['quantity']
            
            print(f"üì¶ –ë–ê–†–ö–û–î: {barcode} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∫–æ–¥–∞
            barcode_options = options_by_barcode.get(barcode)
            
            if not barcode_options:
                print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ü–∏—è—Ö –ø—Ä–∏–µ–º–∫–∏")
                continue
            
            if barcode_options.get('isError'):
                error = barcode_options.get('error', {})
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {error.get('title', 'Unknown')} - {error.get('detail', 'No details')}")
                continue
            
            warehouses_for_barcode = barcode_options.get('warehouses', [])
            if not warehouses_for_barcode:
                print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                continue
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É —Å–∫–ª–∞–¥—É
            has_available_warehouses = False
            
            for warehouse_option in warehouses_for_barcode:
                warehouse_id = warehouse_option['warehouseID']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Å–∫–ª–∞–¥ –≤ –Ω–∞—à–∏—Ö —Å–ª–æ—Ç–∞—Ö
                warehouse_slots = slots_by_warehouse.get(warehouse_id, [])
                
                if not warehouse_slots:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                
                warehouse_name = warehouse_slots[0]['warehouse_name']  # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ª–æ—Ç–æ–≤
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ
                available_packaging = {}
                if warehouse_option.get('canBox'):
                    available_packaging['–ö–æ—Ä–æ–±–∞'] = 'üì¶'
                if warehouse_option.get('canMonopallet'):
                    available_packaging['–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã'] = 'üöõ'
                if warehouse_option.get('canSupersafe'):
                    available_packaging['–°—É–ø–µ—Ä—Å–µ–π—Ñ'] = 'üîí'
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —É–ø–∞–∫–æ–≤–∫–∞–º
                filtered_slots = []
                for slot in warehouse_slots:
                    if slot['box_type'] in available_packaging:
                        filtered_slots.append(slot)
                
                if not filtered_slots:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤
                
                has_available_warehouses = True
                print(f"   üè™ {warehouse_name} (ID: {warehouse_id})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏
                if available_packaging:
                    packaging_list = [f"{emoji} {name}" for name, emoji in available_packaging.items()]
                    print(f"      –£–ø–∞–∫–æ–≤–∫–∏: {', '.join(packaging_list)}")
                else:
                    print("      ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø–∞–∫–æ–≤–æ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã
                print("      üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–µ
                slots_by_date = {}
                for slot in filtered_slots:
                    date = slot['date']
                    if date not in slots_by_date:
                        slots_by_date[date] = []
                    slots_by_date[date].append(slot)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                sorted_dates = sorted(slots_by_date.keys())
                
                if not sorted_dates:
                    print("         ‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤")
                else:
                    for date in sorted_dates:
                        date_slots = slots_by_date[date]
                        formatted_date = self.format_datetime(date)
                        
                        for slot in date_slots:
                            coefficient = slot['coefficient']
                            box_type = slot['box_type']
                            
                            if coefficient == 0:
                                cost_info = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
                            else:
                                cost_info = f"üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {coefficient}"
                            
                            print(f"         {formatted_date} ({box_type}): {cost_info}")
                
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–∫–ª–∞–¥–∞–º–∏
            
            if not has_available_warehouses:
                print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏")
            
            print("-" * 60)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
    
    def run_parsing_cycle(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ Google —Ç–∞–±–ª–∏—Ü"""
        parse_start = time.time()
        
        try:
            print("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ Google —Ç–∞–±–ª–∏—Ü...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è {sheet_name: SheetsData}
            sheets_data = self.sheets_parser.parse_all_sheets()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            self.parsed_data = self.sheets_parser.to_dict(sheets_data)
            
            parse_time = time.time() - parse_start
            
            if not self.parsed_data.get('sheets'):
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü',
                    'parse_time': parse_time
                }
            
            sheets_count = len(self.parsed_data['sheets'])
            total_products = sum(len(sheet.get('products', [])) for sheet in self.parsed_data['sheets'].values())
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {parse_time:.2f}—Å. –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {sheets_count}, —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
            print(f"üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–æ–≤–Ω–æ 3 API –∑–∞–ø—Ä–æ—Å–∞ (—Å–∫–ª–∞–¥—ã + –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã + –≤—Å–µ —Ç–æ–≤–∞—Ä—ã)")
            print(f"üì¶ –í—Å–µ {total_products} —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–¥–Ω–∏–º POST –∑–∞–ø—Ä–æ—Å–æ–º")
            
            return {
                'success': True,
                'parse_time': parse_time
            }
            
        except Exception as e:
            parse_time = time.time() - parse_start
            return {
                'success': False,
                'error': str(e),
                'parse_time': parse_time
            }
    
    async def run_api_request(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω API –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        if not self.parsed_data:
            return {
                'success': False,
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.',
                'api_time': 0
            }
        
        api_start = time.time()
        
        try:
            print(f"üîÑ API –∑–∞–ø—Ä–æ—Å #{self.current_api_requests + 1}/6...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º parsed_data –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è WBMonitor
            temp_file = 'temp_parsed_data.json'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(self.parsed_data, f, ensure_ascii=False, indent=2)
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å –≤ executor —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø—Ä–µ—Ä—ã–≤–∞–µ–º—ã–º
                loop = asyncio.get_event_loop()
                monitoring_results = await loop.run_in_executor(
                    None, 
                    self.wb_monitor.monitor_parsed_data, 
                    temp_file
                )
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            
            api_time = time.time() - api_start
            self.current_api_requests += 1
            
            print(f"‚úÖ API –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {api_time:.2f}—Å")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.display_monitoring_results(self.parsed_data, monitoring_results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å telegram_notifier
            if self.telegram_notifier:
                try:
                    await self.telegram_notifier.send_notification(self.parsed_data, monitoring_results)
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            return {
                'success': True,
                'monitoring_results': monitoring_results,
                'api_time': api_time
            }
            
        except asyncio.CancelledError:
            print("üõë API –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
            api_time = time.time() - api_start
            return {
                'success': False,
                'error': 'API –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω',
                'api_time': api_time
            }
        except Exception as e:
            api_time = time.time() - api_start
            return {
                'success': False,
                'error': str(e),
                'api_time': api_time
            }
    
    async def run_optimized_cycle(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏–∫–ª: –ø–∞—Ä—Å–∏–Ω–≥ + API –∑–∞–ø—Ä–æ—Å"""
        cycle_start_time = time.time()
        
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –º–∏–Ω—É—Ç–Ω—ã–π —Ü–∏–∫–ª)
        if self.current_api_requests == 0:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –º–∏–Ω—É—Ç–Ω—ã–π —Ü–∏–∫–ª
            self.reset_minute_cycle()
            
            parse_result = self.run_parsing_cycle()
            if not parse_result['success']:
                return {
                    'success': False,
                    'error': parse_result['error'],
                    'parse_time': parse_result['parse_time'],
                    'api_time': 0,
                    'total_time': time.time() - cycle_start_time,
                    'cycle_type': 'parse_failed'
                }
        else:
            parse_result = {'success': True, 'parse_time': 0}
        
        # 2. API –∑–∞–ø—Ä–æ—Å
        api_result = await self.run_api_request()
        
        total_time = time.time() - cycle_start_time
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–∏–∫–ª–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.current_api_requests == 1:
            cycle_type = 'parse_and_api'  # –ü–∞—Ä—Å–∏–Ω–≥ + –ø–µ—Ä–≤—ã–π API
        elif self.current_api_requests < self.api_requests_per_minute:
            cycle_type = 'api_only'  # –¢–æ–ª—å–∫–æ API
        else:
            cycle_type = 'api_final'  # –ü–æ—Å–ª–µ–¥–Ω–∏–π API –≤ —Å–µ—Ä–∏–∏
            self.current_api_requests = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        
        return {
            'success': api_result['success'],
            'error': api_result.get('error'),
            'parse_time': parse_result['parse_time'],
            'api_time': api_result['api_time'],
            'total_time': total_time,
            'cycle_type': cycle_type,
            'api_requests_count': self.current_api_requests if cycle_type != 'api_final' else self.api_requests_per_minute
        }
    
    async def run_continuous_monitoring(self, shutdown_event=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WB —Å–ª–æ—Ç–æ–≤")
        print(f"üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –¢–æ—á–Ω–æ 3 API –∑–∞–ø—Ä–æ—Å–∞ –∑–∞ —Ü–∏–∫–ª (—Å–∫–ª–∞–¥—ã + –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã + –≤—Å–µ —Ç–æ–≤–∞—Ä—ã)")
        print(f"üß† –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–ê–£–ó–´: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–∞—É–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ API")
        print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü–∞—Ä—Å–∏–Ω–≥ + API ‚Üí –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ ‚Üí API ‚Üí –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ ‚Üí –ø–æ–≤—Ç–æ—Ä")
        print(f"‚ö° –õ–∏–º–∏—Ç WB: {self.api_requests_per_minute} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É –¥–ª—è –ö–ê–ñ–î–û–ì–û endpoint'–∞")
        print(f"üéØ –¶–µ–ª—å: {self.api_requests_per_minute} —Ü–∏–∫–ª–æ–≤ —Ä–æ–≤–Ω–æ –∑–∞ {self.target_minute_duration} —Å–µ–∫—É–Ω–¥")
        self.print_separator()
        
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ü–∏–∫–ª–æ–º
                if shutdown_event and shutdown_event.is_set():
                    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                    break
                    
                self.cycle_count += 1
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏–∫–ª
                result = await self.run_optimized_cycle()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                cycle_type = result.get('cycle_type', 'unknown')
                
                if cycle_type == 'parse_and_api':
                    print(f"\nüîÑ –¶–ò–ö–õ #{self.cycle_count} [–ü–ê–†–°–ò–ù–ì + API #1] - {datetime.now().strftime('%H:%M:%S')}")
                elif cycle_type == 'api_only':
                    api_num = result.get('api_requests_count', 0)
                    print(f"\nüîÑ –¶–ò–ö–õ #{self.cycle_count} [API #{api_num}] - {datetime.now().strftime('%H:%M:%S')}")
                elif cycle_type == 'api_final':
                    print(f"\nüîÑ –¶–ò–ö–õ #{self.cycle_count} [API #6 - –§–ò–ù–ê–õ] - {datetime.now().strftime('%H:%M:%S')}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if result['success']:
                    print(f"\n‚è±Ô∏è  –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
                    if result['parse_time'] > 0:
                        print(f"   üìä –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü: {result['parse_time']:.2f}—Å")
                    print(f"   üåê API –∑–∞–ø—Ä–æ—Å: {result['api_time']:.2f}—Å")
                    print(f"   ‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: {result['total_time']:.2f}—Å")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    self.last_update = datetime.now()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ø–∞—É–∑—É
                    adaptive_pause = self.calculate_adaptive_pause(result['api_time'])
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—É–∑—É –∏ –¥–µ–π—Å—Ç–≤–∏–µ
                    if cycle_type == 'api_final':
                        next_action = "–Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º"
                        print(f"üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Ä–∏—è –∏–∑ {self.api_requests_per_minute} API –∑–∞–ø—Ä–æ—Å–æ–≤")
                    else:
                        next_action = f"API –∑–∞–ø—Ä–æ—Å #{result.get('api_requests_count', 0) + 1}"
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏
                    self.log_adaptive_timing(result['api_time'], adaptive_pause)
                    next_pause = adaptive_pause
                        
                else:
                    print(f"\n‚ùå –û–®–ò–ë–ö–ê –¶–ò–ö–õ–ê: {result['error']}")
                    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {result['total_time']:.2f}—Å")
                    next_pause = self.api_pause_between_requests
                    next_action = "–ø–æ–≤—Ç–æ—Ä"
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π shutdown
                print(f"\nüò¥ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ {next_pause:.1f}—Å –¥–æ: {next_action}")
                next_time = (datetime.now() + timedelta(seconds=next_pause)).strftime('%H:%M:%S')
                print(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤: {next_time}")
                    
                self.print_separator(".", 60)
                
                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º—ã–π sleep —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π shutdown_event
                if shutdown_event:
                    try:
                        await asyncio.wait_for(shutdown_event.wait(), timeout=next_pause)
                        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã")
                        break
                    except asyncio.TimeoutError:
                        # Timeout –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø–∞—É–∑–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
                        pass
                else:
                    await asyncio.sleep(next_pause)
                
        except asyncio.CancelledError:
            print(f"\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")
            print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {self.cycle_count}")
            print(f"üåê –í—ã–ø–æ–ª–Ω–µ–Ω–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {self.current_api_requests}")
            if self.last_update:
                print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.last_update.strftime('%Y-%m-%d %H:%M:%S')}")
        except KeyboardInterrupt:
            print(f"\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {self.cycle_count}")
            print(f"üåê –í—ã–ø–æ–ª–Ω–µ–Ω–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {self.current_api_requests}")
            if self.last_update:
                print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.last_update.strftime('%Y-%m-%d %H:%M:%S')}")
        except Exception as e:
            print(f"\n\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {self.cycle_count}")
            print(f"üåê –í—ã–ø–æ–ª–Ω–µ–Ω–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {self.current_api_requests}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ WildBerries')
    parser.add_argument('--interval', '-i', type=int, default=300, 
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)')
    parser.add_argument('--once', action='store_true', 
                       help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    
    args = parser.parse_args()
    
    monitor = WBSlotsMonitor(update_interval=args.interval)
    
    if args.once:
        print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        result = await monitor.run_optimized_cycle()
        
        if result['success']:
            print(f"\n‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {result['total_time']:.2f}—Å")
            if result['parse_time'] > 0:
                print(f"üìä –ü–∞—Ä—Å–∏–Ω–≥: {result['parse_time']:.2f}—Å")
            print(f"üåê API: {result['api_time']:.2f}—Å")
            print(f"üéØ –¢–∏–ø —Ü–∏–∫–ª–∞: {result['cycle_type']}")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {result['error']}")
            sys.exit(1)
    else:
        await monitor.run_continuous_monitoring()


if __name__ == "__main__":
    asyncio.run(main())