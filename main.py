#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WB Slots Monitor —Å Telegram –±–æ—Ç–æ–º
–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WildBerries —Å–ª–æ—Ç–æ–≤ –∏ Telegram –±–æ—Ç–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
"""

import asyncio
import signal
import sys
import os
import logging
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(__file__))

from wb_monitor import WBSlotsMonitor
from telegram_bot import create_telegram_notifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/main.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
shutdown_event = asyncio.Event()


class WBTelegramService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WB –∏ Telegram –±–æ—Ç–∞"""
    
    def __init__(self, update_interval: int = 300):
        self.update_interval = update_interval
        self.telegram_notifier: Optional = None
        self.wb_monitor: Optional[WBSlotsMonitor] = None
        self.running = False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('logs', exist_ok=True)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WB Telegram Service...")
            
            # –°–æ–∑–¥–∞–µ–º Telegram notifier
            logger.info("üì± –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
            self.telegram_notifier = create_telegram_notifier()
            
            # –°–æ–∑–¥–∞–µ–º WB monitor —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram
            logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ WB –º–æ–Ω–∏—Ç–æ—Ä–∞...")
            self.wb_monitor = WBSlotsMonitor(
                update_interval=self.update_interval,
                telegram_notifier=self.telegram_notifier
            )
            
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ —Å graceful shutdown"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –±–æ—Ç–∞
            bot_polling_task = asyncio.create_task(self.telegram_notifier.start_bot())
            
            # –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            done, pending = await asyncio.wait(
                [bot_polling_task, asyncio.create_task(shutdown_event.wait())],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ—Ç–º–µ–Ω—è–µ–º –±–æ—Ç–∞
            if shutdown_event.is_set():
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
                bot_polling_task.cancel()
                try:
                    await bot_polling_task
                except asyncio.CancelledError:
                    pass
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise
    
    async def start_wb_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WB —Å graceful shutdown"""
        try:
            logger.info("üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WB —Å–ª–æ—Ç–æ–≤...")
            # –ü–µ—Ä–µ–¥–∞–µ–º shutdown_event –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.wb_monitor.run_continuous_monitoring(shutdown_event)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WB: {e}")
            raise
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º"""        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.initialize()
            
            self.running = True
            logger.info("üéØ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ WB Telegram Monitor...")
            
            print("=" * 80)
            print("üöÄ WB SLOTS MONITOR –° TELEGRAM –ë–û–¢–û–ú")
            print("=" * 80)
            print("üì± Telegram –±–æ—Ç: –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            print("üìä WB –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã")
            print("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram")
            print("=" * 80)
            print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫)")
            print("=" * 80)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            bot_task = asyncio.create_task(self.start_telegram_bot())
            monitor_task = asyncio.create_task(self.start_wb_monitoring())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º shutdown watcher
            async def shutdown_watcher():
                await shutdown_event.wait()
                logger.info("üõë Shutdown watcher: –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏")
                bot_task.cancel()
                monitor_task.cancel()
            
            shutdown_task = asyncio.create_task(shutdown_watcher())
            
            # –ñ–¥–µ–º –ª—é–±–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            try:
                await asyncio.gather(bot_task, monitor_task, shutdown_task, return_exceptions=True)
            except asyncio.CancelledError:
                logger.info("üõë –ó–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.running:
            return
            
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞...")
        self.running = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        shutdown_event.set()
        
        try:
            if self.telegram_notifier:
                await self.telegram_notifier.stop_bot()
                logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")
        
        logger.info("üèÅ –°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω")


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    def signal_handler(signum, frame):
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum} - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï")
        shutdown_event.set()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ graceful shutdown –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        def force_exit():
            import time
            time.sleep(3)
            logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã")
            os._exit(1)
        
        import threading
        force_thread = threading.Thread(target=force_exit, daemon=True)
        force_thread.start()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Unix —Å–∏–≥–Ω–∞–ª–æ–≤
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, signal_handler)
    if hasattr(signal, 'SIGINT'):
        signal.signal(signal.SIGINT, signal_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='WB Slots Monitor —Å Telegram –±–æ—Ç–æ–º')
    parser.add_argument('--interval', '-i', type=int, default=300,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = WBTelegramService(update_interval=args.interval)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        await service.run()
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è  –ü–æ–ª—É—á–µ–Ω Ctrl+C")
        
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    
    finally:
        # Graceful shutdown –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        await service.shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)